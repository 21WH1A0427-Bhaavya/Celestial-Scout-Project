function start_gui()
    screenSize = get(0, 'ScreenSize');
    fig = figure('Name', 'Celestial scout', 'NumberTitle', 'off', 'Position',[1500, 0, 1000, 800], 'Color', [0, 0, 0]);
    
    % Set background image
    ax = axes('Position', [0, 0, 1, 1]);  % Full screen axes
    backgroundImage = imread('background_image.jpg');  % Path to your background image
    
    % Resize the image to match the screen size
    resizedImage = imresize(backgroundImage, [screenSize(4), screenSize(3)]);  % Resize to screenHeight, screenWidth
    
    % Display the resized image
    imshow(resizedImage, 'Parent', ax);  
    
    % Make axes invisible
    set(ax, 'Visible', 'off');

    % Add centered title text
    uicontrol('Style', 'text', 'String', '  Celestial Scout  ', 'Position', [220, 450, 550, 70], ...
              'FontSize', 50, 'FontWeight', 'bold','FontName', 'Brush Script MT', 'BackgroundColor', [0, 0, 0, 0.5], 'HorizontalAlignment', 'center', 'ForegroundColor', [0.8, 1, 1]);
    
    % Add centered subtitle text beneath the title
    uicontrol('Style', 'text', 'String', 'Uncovering the celestial skies', 'Position', [310, 400, 400, 30], ...
              'FontSize', 20, 'FontAngle', 'italic', 'HorizontalAlignment', 'center', 'BackgroundColor', [0.8, 1, 1], 'ForegroundColor', 'black');
    
    % Add a button below the subtitle, which calls another function when clicked
    uicontrol('Style', 'pushbutton', 'String', 'Explore', 'Position', [450, 200, 100, 50], ...
              'FontSize', 14, 'Callback', @(src, event) inputGUI(fig), 'BackgroundColor', 'none', ...
              'ForegroundColor', [0.8, 1, 1], ... % White text
              'FontWeight', 'bold');

    uicontrol('Style', 'pushbutton', 'String', 'Know Us!', 'Position', [880, 80, 100, 40], ...
          'FontSize', 12, 'Callback', @(src, event) showTeamProjectDetails(), 'BackgroundColor', 'none', ...
              'ForegroundColor', [0.8, 1, 1], ... % Light cyan text
              'FontWeight', 'bold');
    
    % Function to be called when the button is clicked

    function showTeamProjectDetails(~, ~) 
        fig = uifigure('Name', 'Know the Team', 'Position', [400, 100, 540, 450]);
        fig.Color = 'black'; % Set the background color to black
        label = uilabel(fig, ...
            'Text', ['WHY THIS PROJECT?', newline, ...
            'As avid astronomy enthusiasts, we aim to share the wonders of', newline,  ...
            'the universe with you. This project is our way of making the', newline, ...
            'night sky more accessible and enjoyable, offering a resource', newline, ...
            'to explore constellations and stars with ease.', newline, newline, ...
            'HOW TO USE IT:', newline, ...
            'Simply enter the date, time, and location and weâ€™ll provide', newline, ...
            'you, with all visible constellations, including the altitude', newline, ...
            'and azimuth angles of their stars to guide your telescope.', newline, newline, ...
            'MEET THE TEAM:', newline, ...
            'We are a passionate team of four: Bhaavya, Laasya, Divyanshi', newline, ...
            'and Akhila along with the guidance from Sahithi Madam, we', newline, ...
            'have brought this vision to life.', newline, newline, ...
            'Remember to look at the stars and not down at your feet!'], ...
            'Position', [25, 0, 480, 400], ... % Adjust position and height for visibility
            'FontSize', 15, ...
            'HorizontalAlignment', 'center', ...
            'VerticalAlignment', 'top', ...
            'FontColor', 'white', ... % Set text color to white
            'BackgroundColor', 'black'); % Match background to the window

        
        % Add a button to close the window
        btn = uibutton(fig, ...
            'Text', 'Okay', ...
            'Position', [220, 10, 100, 40], ... % Position button at the bottom center
            'FontColor', 'white', ... % Set button text color to white
            'BackgroundColor', '#333333', ... % Set button background to dark gray
            'ButtonPushedFcn', @(btn, event) close(fig));
    end
end

function inputGUI(fig)
    close(fig);
    % Create the main figure window, maximized
    screenSize = get(0, 'ScreenSize'); % Get screen size
    fig = uifigure('Name', 'Constellation Viewer', 'Position', [0 0 screenSize(3) screenSize(4)], 'Color', [0, 0, 0]);
    %fig.Color = [0, 0, 0]; % Set figure background color to black

    % Create a grid layout for splitting the figure into two halves
    mainLayout = uigridlayout(fig, [1, 2]);
    mainLayout.ColumnWidth = {'0.7x', '2x'}; % Allocate 1:2 space for input and output
    mainLayout.BackgroundColor = [0, 0, 0];

    % Left panel for user input
    inputPanel = uipanel(mainLayout, 'Title', 'User Input', 'FontSize', 14, 'ForegroundColor', [1, 1, 1]);
    inputPanel.BackgroundColor = [0, 0, 0]; % Set panel background color to black
    inputLayout = uigridlayout(inputPanel, [6, 2]);
    inputLayout.RowHeight = {30, 30, 30, 30, 30, 40, '1x'}; % Add rows and adjust proportions
    inputLayout.ColumnWidth = {'1x', '2x'};
    inputLayout.BackgroundColor = [0, 0, 0];

    % Input fields and labels with updated colors
    uilabel(inputLayout, 'Text', 'Date (yyyy-mm-dd):', 'HorizontalAlignment', 'right', 'FontSize', 13, 'FontColor', [1, 1, 1]);
    dateField = uieditfield(inputLayout, 'text', 'Value', '2024-11-29', 'BackgroundColor', [0.3, 0.3, 0.3], 'FontColor', [1, 1, 1]);
    dateField.HorizontalAlignment = 'center';
    
    uilabel(inputLayout, 'Text', 'Time (HH:MM:SS):', 'HorizontalAlignment', 'right', 'FontSize', 13, 'FontColor', [1, 1, 1]);
    timeField = uieditfield(inputLayout, 'text', 'Value', '20:00:00', 'BackgroundColor', [0.3, 0.3, 0.3], 'FontColor', [1, 1, 1]);
    timeField.HorizontalAlignment = 'center';
    
    uilabel(inputLayout, 'Text', 'Latitude:', 'HorizontalAlignment', 'right', 'FontSize', 13, 'FontColor', [1, 1, 1]);
    latField = uieditfield(inputLayout, 'numeric', 'Value', 37.7749, 'BackgroundColor', [0.3, 0.3, 0.3], 'FontColor', [1, 1, 1]);
    latField.HorizontalAlignment = 'center';
    
    uilabel(inputLayout, 'Text', 'Longitude:', 'HorizontalAlignment', 'right', 'FontSize', 13, 'FontColor', [1, 1, 1]);
    lonField = uieditfield(inputLayout, 'numeric', 'Value', -122.4194, 'BackgroundColor', [0.3, 0.3, 0.3], 'FontColor', [1, 1, 1]);
    lonField.HorizontalAlignment = 'center';
    
    % Submit button
    submitButton = uibutton(inputLayout, 'Text', 'Submit', 'ButtonPushedFcn', @(btn, event) submitDetails(), 'FontSize', 15, 'BackgroundColor', [0.5, 0.5, 0.5], 'FontColor', [1, 1, 1]);
    submitButton.Layout.Row = 6;
    submitButton.Layout.Column = [1 2];
    
    % Results tab group
    resultsTabGroup = uitabgroup(inputLayout);
    resultsTabGroup.Layout.Row = 7;
    resultsTabGroup.Layout.Column = [1 2];

    % Tabs for results with updated colors
    visibleTab = uitab(resultsTabGroup, 'Title', 'Visible Constellations');
    visibleTab.BackgroundColor = [0, 0, 0];
    visibleTextArea = uitextarea(visibleTab, 'Editable', 'off', 'BackgroundColor', [0.2, 0.2, 0.2], 'FontColor', [1, 1, 1], 'FontSize', 12);
    visibleTextArea.Position = [10, 10, 500, 600]; % Adjust size of the text area

    nonVisibleTab = uitab(resultsTabGroup, 'Title', 'Not Visible Constellations');
    nonVisibleTab.BackgroundColor = [0, 0, 0];
    nonVisibleTextArea = uitextarea(nonVisibleTab, 'Editable', 'off', 'BackgroundColor', [0.2, 0.2, 0.2], 'FontColor', [1, 1, 1]);
    nonVisibleTextArea.Position = [10, 10, 500, 600];

    % Right panel for output constellations
    outputPanel = uipanel(mainLayout, 'Title', 'Visible Constellations', 'FontSize', 14, 'ForegroundColor', [1, 1, 1]);
    outputPanel.BackgroundColor = [0, 0, 0];
    outputPanel.Layout.Column = 2;

    outputLayout = uigridlayout(outputPanel, [1, 1]);
    outputLayout.BackgroundColor = [0, 0, 0];
    %outputLayout.Padding = [0 0 0 0];

    % Tab group for output
    tabGroup = uitabgroup(outputLayout);
    tab1 = uitab(tabGroup, 'Title', '');
    tab1.BackgroundColor = [0, 0, 0]; 
    axBackground = axes(tab1, 'Position', [0 0 1 1]); % Full axes for background
    imshow('constellations/plot_bg2.png', 'Parent', axBackground);

    % Define the callback function for the button
    function submitDetails()
        % Retrieve inputs from the fields
        dateInput = dateField.Value;
        timeInput = timeField.Value;
        latitude = latField.Value;
        longitude = lonField.Value;

        % Validate inputs
        if isempty(dateInput) || isempty(timeInput) || isnan(latitude) || isnan(longitude)
            uialert(fig, 'Please fill in all fields with valid values.', 'Input Error', 'BackgroundColor', [0, 0, 0], 'FontColor', [1, 1, 1]);
            return;
        end

        % Clear previous results
        visibleTextArea.Value = ''; % Clear visible results
        nonVisibleTextArea.Value = ''; % Clear non-visible results
        delete(tabGroup.Children); % Clear previous plot tabs

        % Call the visibility function and display results
        visible_constellations_3D(dateInput, timeInput, latitude, longitude, tabGroup, visibleTextArea, nonVisibleTextArea);
    end
end

%function constellation_details

% Visible constellations function
function visible_constellations_3D(dateStr, timeStr, latitude, longitude, tabGroup, visibleTextArea, nonVisibleTextArea)
    % constellations and their star coordinates

    % Calculate Local Sidereal Time (LST)
    LST = calculate_LST(dateStr, timeStr, longitude);

    % Initialize cell arrays for visible and non-visible constellations
    visible_constellations = {};
    non_visible_constellations = {};

    %constellation_details = getConstellationDetails();
    
    % Loop through constellations
    for c = fieldnames(constellations)'
        constellation = c{1};
        stars = constellations.(constellation);
        visible = false;
    
        % Initialize data for plotting
        x = [];
        y = [];
        z = [];
        labels = {};
        resultLines = {};
    
        for i = 1:length(stars)
            star = stars(i);
            % Convert RA and Dec to degrees
            RA_deg = convertRAtoDegrees(star.RA);
            DEC_deg = convertDECtoDegrees(star.Dec);
    
            % Convert RA and Dec to Altitude and Azimuth
            [Alt, Az] = radec2altaz(RA_deg, DEC_deg, LST, latitude);
    
            % Calculate Cartesian coordinates for 3D plotting
            Alt_rad = deg2rad(Alt);
            Az_rad = deg2rad(Az);
            x = [x; cos(Alt_rad) * cos(Az_rad)];
            y = [y; cos(Alt_rad) * sin(Az_rad)];
            z = [z; sin(Alt_rad)];
            labels = [labels; star.name];
    
            if Alt > 0
                visible = true;
                resultLines = [resultLines; sprintf('%s: Visible - Alt: %.2fÂ°, Az: %.2fÂ°', star.name, Alt, Az)];
            else
                resultLines = [resultLines; sprintf('%s: Not Visible - Alt: %.2fÂ°, Az: %.2fÂ°', star.name, Alt, Az)];
            end
        end
    
        % Append results and create a tab if visible
        if visible
            % Append visible constellation info
            visible_constellations = [visible_constellations; {['Constellation: ', constellation]}];
            visible_constellations = [visible_constellations; resultLines; {''}];
    
            % Create a new tab for the constellation
            tab = uitab(tabGroup, 'Title', constellation);
            tab.BackgroundColor = [0, 0, 0];
            axBackground = axes(tab, 'Position', [0 0 1 1]); % Full axes for background
            imshow('constellations/plot_bg2.png', 'Parent', axBackground); % Set your image as the background
            
            ax = uiaxes(tab, 'Color', [0, 0, 0], 'GridColor', [1, 1, 1], ...
                'XColor', [1, 1, 1], 'YColor', [1, 1, 1], 'ZColor', [1, 1, 1], ...
                'FontSize', 12);
            ax.Position = [5, 10, 1000, 600];
            scatter3(ax, x, y, z, 50, 'filled', 'b');
            hold(ax, 'on');
    
            for j = 1:length(x)
                text(ax, x(j), y(j), z(j), labels{j}, 'VerticalAlignment', 'bottom', 'HorizontalAlignment', 'right', 'Color', [1, 1, 1]);
            end
    
            % Draw lines between stars
            for j = 1:length(x) - 1
                plot3(ax, [x(j), x(j+1)], [y(j), y(j+1)], [z(j), z(j+1)], 'r-', 'LineWidth', 1.5);
            end
    
            title(ax, ['Constellation: ', constellation], 'Color', [1, 1, 1], 'FontSize', 16);
            xlabel(ax, 'X', 'Color', [0, 0, 0]);
            ylabel(ax, 'Y', 'Color', [0, 0, 0]);
            zlabel(ax, 'Z', 'Color', [0, 0, 0]);
            axis(ax, 'equal');
            grid(ax, 'on');
            rotate3d(ax, 'on');
            hold(ax, 'off');

            detailsButton = uibutton(tab, 'Text', 'Details', ...
                    'Position', [10, 10, 80, 30], ...
                    'ButtonPushedFcn', @(btn, event) showDetailsMessage(constellation), 'BackgroundColor', [0.5, 0.5, 0.5], 'FontColor', [1, 1, 1]);
            drawnow;

        else
            % Append non-visible constellation info
            non_visible_constellations = [non_visible_constellations; {['Constellation ', constellation, ' is not visible.', newline, newline]}];
        end
    end

% Combine visible and non-visible constellations for display
    visibleTextArea.Value = visible_constellations;
    nonVisibleTextArea.Value = non_visible_constellations;
end

function showDetailsMessage(constellation)
    % Fetch constellation details
    constellation_details = getConstellationDetails();
    
    % Check if the details for the selected constellation exist
    if isfield(constellation_details, constellation)
        % Access the description and image path for the selected constellation
        details = constellation_details.(constellation);  % This dynamically accesses the constellation's details
        description = details.description;
        image_path = details.image;
        
        % Create a custom message box (UI Figure)
        messageBox = uifigure('Name', ['Details of ', constellation], 'Position', [100, 100, 600, 400], 'Color', [0,0,0]);

        grid = uigridlayout(messageBox, [1, 2]);
        grid.BackgroundColor = [0, 0, 0];
        grid.ColumnWidth = {'1x', '1x'};  % Equal width for both panels

        % Right panel for the image
        leftPanel = uipanel(grid, 'Title', [constellation,' Image'], 'ForegroundColor', [1, 1, 1]);
        leftPanel.BackgroundColor = [0, 0, 0];
        leftPanel.Layout.Column = 1;  % Assign to the second column

        % Create axes to display the image inside the left panel
        ax = axes(leftPanel, 'Position', [0.001, 0.008, 1.0, 1.0]);  % Adjust as needed
        
        % Display the image in the axes
        img = imread(image_path);  % Read the image
        imshow(img, 'Parent', ax);  % Show the image in the axes

        drawnow;

        rightPanel = uipanel(grid, 'Title', [constellation, ' Description'], 'ForegroundColor', [1, 1, 1]);
        rightPanel.BackgroundColor = [0, 0, 0];
        rightPanel.Layout.Column = 2;  % Assign to the first column

        % Create a label to display the description text inside the left panel
        descriptionLabel = uilabel(rightPanel, 'Text', description, 'Position', [5, 5, 250, 350], ...
                                   'FontSize', 12, 'FontColor', [1, 1, 1], 'HorizontalAlignment', 'left', 'WordWrap', 'on');
        
    else
        % If no details are available for the constellation, show a message
        disp(['No details available for ', constellation]);
    end
end


% Convert RA from [hours, minutes, seconds] to degrees
function RA_deg = convertRAtoDegrees(RA)
    RA_deg = RA(1) * 15 + RA(2) * 15 / 60 + RA(3) * 15 / 3600;
end

% Convert DEC from [degrees, minutes, seconds] to degrees
function DEC_deg = convertDECtoDegrees(DEC)
    DEC_deg = DEC(1) + DEC(2) / 60 + DEC(3) / 3600;
end

% Calculate Local Sidereal Time (LST)
function LST = calculate_LST(dateStr, timeStr, longitude)
    JD = datetime_to_julian(dateStr, timeStr);
    T = (JD - 2451545.0) / 36525.0;
    GST = mod(280.46061837 + 360.98564736629 * (JD - 2451545.0) + T^2 * (0.000387933 - T / 38710000.0), 360.0);
    LST = mod(GST + longitude, 360.0);
end

% Convert date and time to Julian Date
function JD = datetime_to_julian(dateStr, timeStr)
    dt = datetime([dateStr, ' ', timeStr], 'InputFormat', 'yyyy-MM-dd HH:mm:ss');
    JD = juliandate(dt);
end

% Convert RA and Dec to Alt-Az (elevation and azimuth)
function [Alt, Az] = radec2altaz(RA_deg, DEC_deg, LST, latitude)
    % Convert LST and RA to radians
    LST_rad = deg2rad(LST);
    RA_rad = deg2rad(RA_deg);
    latitude_rad = deg2rad(latitude);

    % Calculate Hour Angle (HA)
    HA = LST_rad - RA_rad;

    % Calculate Altitude and Azimuth
    sin_alt = sin(latitude_rad) * sin(deg2rad(DEC_deg)) + cos(latitude_rad) * cos(deg2rad(DEC_deg)) * cos(HA);
    Alt = rad2deg(asin(sin_alt));

    cos_az = (sin(deg2rad(DEC_deg)) - sin(deg2rad(Alt)) * sin(latitude_rad)) / (cos(deg2rad(Alt)) * cos(latitude_rad));
    Az = rad2deg(acos(cos_az));

    % Adjust Azimuth
    if sin(deg2rad(HA)) > 0
        Az = 360 - Az;
    end
end

start_gui()
